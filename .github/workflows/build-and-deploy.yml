name: Build and Push Docker Image for Person Detection Service

on:
  push:
    branches:
      - main

permissions:
  packages: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: echo "${GITHUB_TOKEN}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build Docker image
      run: docker build -t ghcr.io/deepview-analytics/person_detection_service_yolov8s:latest .

    - name: Push Docker image to GitHub Packages
      run: docker push ghcr.io/deepview-analytics/person_detection_service_yolov8s:latest

  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 1: Set up SSH connection to WSL
      - name: Set up SSH key for GitHub Actions
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Step 2: Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          kubeconfig: ${{ secrets.KUBECONFIG }}

      # Step 3: Write KUBECONFIG to a file and verify
      - name: Write KUBECONFIG to file
        run: echo "${{ secrets.KUBECONFIG }}" > kubeconfig.yaml

      - name: Verify KUBECONFIG file
        run: cat kubeconfig.yaml

      # Step 4: Set the KUBECONFIG environment variable
      - name: Set KUBECONFIG environment variable
        run: echo "KUBECONFIG=$(pwd)/kubeconfig.yaml" >> $GITHUB_ENV

      # Step 5: Establish SSH connection to WSL (Docker Desktop Kubernetes)
      - name: Establish SSH Connection to WSL Docker Desktop
        run: |
          WSL_IP=172.19.15.127
          echo "WSL IP: $WSL_IP"
          
          # Connect to WSL instance over SSH and apply Kubernetes config
          ssh -o StrictHostKeyChecking=no user@${WSL_IP} << EOF
            echo "Connected to WSL and applying Kubernetes config..."

            # Set the kubeconfig and apply Kubernetes manifests
            export KUBECONFIG=/path/to/kubeconfig.yaml
            kubectl config use-context docker-desktop --kubeconfig=$KUBECONFIG

            kubectl apply -f /path/to/kubernetes/deployment.yaml --kubeconfig=$KUBECONFIG
            kubectl apply -f /path/to/kubernetes/service.yaml --kubeconfig=$KUBECONFIG
            kubectl apply -f /path/to/kubernetes/hpa.yaml --kubeconfig=$KUBECONFIG
            kubectl apply -f /path/to/kubernetes/network-policy.yaml --kubeconfig=$KUBECONFIG
          EOF
