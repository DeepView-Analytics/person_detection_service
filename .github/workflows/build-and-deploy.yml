name: Build and Push Docker Image for Person Detection Service

on:
  push:
    branches:
      - main

permissions:
  packages: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout the code
      uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: echo "${GITHUB_TOKEN}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build Docker image
      run: docker build -t ghcr.io/deepview-analytics/person_detection_service_yolov8s:latest .

    - name: Push Docker image to GitHub Packages
      run: docker push ghcr.io/deepview-analytics/person_detection_service_yolov8s:latest

  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 1: Install kubectl
      - name: Install kubectl
        run: |
          sudo apt-get update
          sudo apt-get install -y kubectl

      # Step 2: Set up KUBECONFIG to access WSL Kubernetes API via ngrok
      - name: Configure kubectl for ngrok tunnel
        env:
          NGROK_URL: "2.tcp.eu.ngrok.io"   # Replace with your ngrok URL
          NGROK_PORT: "11708"              # Replace with the ngrok port from your output
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
        run: |
          # Configure kubectl to use the ngrok URL and your Kubernetes token
          cat <<EOF > ./kubeconfig
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              server: https://${NGROK_URL}:${NGROK_PORT}
              insecure-skip-tls-verify: true
            name: ngrok-cluster
          contexts:
          - context:
              cluster: ngrok-cluster
              user: github-user
            name: ngrok-context
          current-context: ngrok-context
          preferences: {}
          users:
          - name: github-user
            user:
              token: ${KUBE_TOKEN}
          EOF

          export KUBECONFIG=./kubeconfig
          kubectl config use-context ngrok-context

      # Step 3: Apply Kubernetes manifests
      - name: Apply Kubernetes Configuration
        run: |
          kubectl apply -f ./kubernetes/deployment.yaml --validate=false
          kubectl apply -f ./kubernetes/service.yaml --validate=false
          kubectl apply -f ./kubernetes/hpa.yaml --validate=false
          kubectl apply -f ./kubernetes/network-policy.yaml --validate=false

